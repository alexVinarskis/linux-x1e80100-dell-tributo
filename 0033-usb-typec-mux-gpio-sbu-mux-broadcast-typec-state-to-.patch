From ee0af4bd259f36840e7b2a2e9b6c5e5dd5852c68 Mon Sep 17 00:00:00 2001
From: Aleksandrs Vinarskis <alex.vinarskis@gmail.com>
Date: Sun, 25 May 2025 19:29:01 +0200
Subject: [PATCH] usb: typec-mux: gpio-sbu-mux: broadcast typec state to next
 mux

In the Type-C graph, sbu mux is between USB-C connector and the USB3/DP
combo PHY, and this PHY also requires the USB-C mode events to properly
set-up the SuperSpeed Lanes functions to setup USB3-only, USB3 + DP
Altmode or DP Altmode only on the 4 lanes.

Update the sbu mux to get an optional type-c mux on the next endpoint,
and broadcast the received mode to it.

It is worth mentioning that even though gpio-sbu-mux claims to only mux
SBU lines, some ICs using this driver are also USB3 SS muxes, and
implement orientation switching. Hence, propagating USB-C orientation
to next type-c switch is not required. If it would be required for true
SBU-only muxes, driver should implement multiple compatibles to avoid
reversing polarity of USB SS twice (once in 'sbu' mux, once in upstream
Type-C switch).

Reworked from: a96abf3bad81 ("usb: typec-mux: ptn36502: broadcast typec state to next mux")

Signed-off-by: Aleksandrs Vinarskis <alex.vinarskis@gmail.com>
---
 drivers/usb/typec/mux/gpio-sbu-mux.c | 36 ++++++++++++++++++++++------
 1 file changed, 29 insertions(+), 7 deletions(-)

diff --git a/drivers/usb/typec/mux/gpio-sbu-mux.c b/drivers/usb/typec/mux/gpio-sbu-mux.c
index 1834f1a2dd9d..1de06fba8b91 100644
--- a/drivers/usb/typec/mux/gpio-sbu-mux.c
+++ b/drivers/usb/typec/mux/gpio-sbu-mux.c
@@ -18,6 +18,8 @@ struct gpio_sbu_mux {
 	struct typec_switch_dev *sw;
 	struct typec_mux_dev *mux;
 
+	struct typec_mux *typec_mux;
+
 	struct mutex lock; /* protect enabled and swapped */
 	bool enabled;
 	bool swapped;
@@ -65,6 +67,7 @@ static int gpio_sbu_mux_set(struct typec_mux_dev *mux,
 			    struct typec_mux_state *state)
 {
 	struct gpio_sbu_mux *sbu_mux = typec_mux_get_drvdata(mux);
+	struct typec_mux_state mux_state;
 
 	if (!sbu_mux->enable_gpio)
 		return -EOPNOTSUPP;
@@ -89,7 +92,11 @@ static int gpio_sbu_mux_set(struct typec_mux_dev *mux,
 
 	mutex_unlock(&sbu_mux->lock);
 
-	return 0;
+	mux_state.alt = state->alt;
+	mux_state.data = state->data;
+	mux_state.mode = state->mode;
+
+	return typec_mux_set(sbu_mux->typec_mux, &mux_state);
 }
 
 static int gpio_sbu_mux_probe(struct platform_device *pdev)
@@ -98,6 +105,7 @@ static int gpio_sbu_mux_probe(struct platform_device *pdev)
 	struct typec_mux_desc mux_desc = { };
 	struct device *dev = &pdev->dev;
 	struct gpio_sbu_mux *sbu_mux;
+	int ret;
 
 	sbu_mux = devm_kzalloc(dev, sizeof(*sbu_mux), GFP_KERNEL);
 	if (!sbu_mux)
@@ -116,14 +124,21 @@ static int gpio_sbu_mux_probe(struct platform_device *pdev)
 		return dev_err_probe(dev, PTR_ERR(sbu_mux->select_gpio),
 				     "unable to acquire select gpio\n");
 
+	sbu_mux->typec_mux = typec_mux_get(dev);
+	if (IS_ERR(sbu_mux->typec_mux))
+		return dev_err_probe(dev, PTR_ERR(sbu_mux->typec_mux),
+				     "unable to acquire mode-mux\n");
+
 	sw_desc.drvdata = sbu_mux;
 	sw_desc.fwnode = dev_fwnode(dev);
 	sw_desc.set = gpio_sbu_switch_set;
 
 	sbu_mux->sw = typec_switch_register(dev, &sw_desc);
-	if (IS_ERR(sbu_mux->sw))
-		return dev_err_probe(dev, PTR_ERR(sbu_mux->sw),
-				     "failed to register typec switch\n");
+	if (IS_ERR(sbu_mux->sw)) {
+		ret = dev_err_probe(dev, PTR_ERR(sbu_mux->sw),
+				    "failed to register typec switch\n");
+		goto err_switch_put;
+	}
 
 	mux_desc.drvdata = sbu_mux;
 	mux_desc.fwnode = dev_fwnode(dev);
@@ -131,14 +146,21 @@ static int gpio_sbu_mux_probe(struct platform_device *pdev)
 
 	sbu_mux->mux = typec_mux_register(dev, &mux_desc);
 	if (IS_ERR(sbu_mux->mux)) {
-		typec_switch_unregister(sbu_mux->sw);
-		return dev_err_probe(dev, PTR_ERR(sbu_mux->mux),
-				     "failed to register typec mux\n");
+		ret = dev_err_probe(dev, PTR_ERR(sbu_mux->mux),
+				    "failed to register typec mux\n");
+		goto err_switch_unregister;
 	}
 
 	platform_set_drvdata(pdev, sbu_mux);
 
 	return 0;
+
+err_switch_unregister:
+	typec_switch_unregister(sbu_mux->sw);
+err_switch_put:
+	typec_mux_put(sbu_mux->typec_mux);
+
+	return ret;
 }
 
 static void gpio_sbu_mux_remove(struct platform_device *pdev)
-- 
2.45.2

